#include "black_scholes.h"

void my_fused_impl(const Array<float> strike_price, const Array<float> stock_price, const Array<float> volatility, Array<float> out, int64_t len194){
  int64_t x195 = 0;
 int64_t x193 = x195;
 int64_t len192 = len194;
 int64_t x185 = x195;
 int64_t len184 = len194;
 int64_t x188 = x193;
 int64_t len189 = len192;
 int64_t x191 = x193;
 int64_t len190 = len192;
 int64_t x187 = x188;
 int64_t len186 = len189;
 int64_t x179 = x187;
 int64_t len178 = len186;
 int64_t x181 = x187;
 int64_t len180 = len186;
 int64_t x182 = x185;
 int64_t len183 = len184;
 int64_t x177 = x181;
 int64_t len176 = len180;
 int64_t x175 = x177;
 int64_t len174 = len176;
 int64_t x167 = x177;
 int64_t len166 = len176;
 int64_t x173 = x175;
 int64_t len172 = len174;
 int64_t x171 = x173;
 int64_t len170 = len172;
 int64_t x169 = x171;
 int64_t len168 = len170;
 int64_t x165 = x167;
 int64_t len164 = len166;
 Array<float> s_over_k_q = array_alloc<float>(x165, len164);
 Array<float> log_res_q = array_alloc<float>(x167, len166);
 Array<float> vol_sq_q = array_alloc<float>(x169, len168);
 Array<float> vol_sq_half_q = array_alloc<float>(x171, len170);
 Array<float> vol_sq_half_plusr_q = array_alloc<float>(x173, len172);
 Array<float> vol_inter_q = array_alloc<float>(x175, len174);
 Array<float> d1_inter_q = array_alloc<float>(x177, len176);
 Array<float> vol_sqrt_T_q = array_alloc<float>(x179, len178);
 Array<float> d1_q = array_alloc<float>(x181, len180);
 Array<float> d1_cdf_q = array_alloc<float>(x182, len183);
 Array<float> part1_q = array_alloc<float>(x185, len184);
 Array<float> d2_q = array_alloc<float>(x187, len186);
 Array<float> d2_cdf_q = array_alloc<float>(x188, len189);
 Array<float> k_scaled_q = array_alloc<float>(x191, len190);
 Array<float> part2_q = array_alloc<float>(x193, len192);
 for(int64_t x195 = out.idx;x195 < out.idx + out.size; x195+=len194){
    int64_t x193 = x195;
  int64_t len192 = len194;
  int64_t x185 = x195;
  int64_t len184 = len194;
  int64_t x188 = x193;
  int64_t len189 = len192;
  int64_t x191 = x193;
  int64_t len190 = len192;
  int64_t x187 = x188;
  int64_t len186 = len189;
  int64_t x179 = x187;
  int64_t len178 = len186;
  int64_t x181 = x187;
  int64_t len180 = len186;
  int64_t x182 = x185;
  int64_t len183 = len184;
  int64_t x177 = x181;
  int64_t len176 = len180;
  int64_t x175 = x177;
  int64_t len174 = len176;
  int64_t x167 = x177;
  int64_t len166 = len176;
  int64_t x173 = x175;
  int64_t len172 = len174;
  int64_t x171 = x173;
  int64_t len170 = len172;
  int64_t x169 = x171;
  int64_t len168 = len170;
  int64_t x165 = x167;
  int64_t len164 = len166;
  Array<float> stock_price_q41 = stock_price.array_query_no_materialize(x165, len164);
  Array<float> strike_price_q40 = strike_price.array_query_no_materialize(x165, len164);
  Array<float> volatility_q39 = volatility.array_query_no_materialize(x169, len168);
  Array<float> volatility_q38 = volatility.array_query_no_materialize(x179, len178);
  Array<float> stock_price_q37 = stock_price.array_query_no_materialize(x185, len184);
  Array<float> strike_price_q36 = strike_price.array_query_no_materialize(x191, len190);
  Array<float> out_q = out.array_query_no_materialize(x195, len194);
    mock::div(stock_price_q41.data, strike_price_q40.data, len164, s_over_k_q.data);
    mock::vlog(s_over_k_q.data, len166, log_res_q.data);
    mock::mul(volatility_q39.data, volatility_q39.data, len168, vol_sq_q.data);
    mock::divi(vol_sq_q.data, 2.0f, len170, vol_sq_half_q.data);
    mock::addi(vol_sq_half_q.data, 0.01f, len172, vol_sq_half_plusr_q.data);
    mock::muli(vol_sq_half_plusr_q.data, 0.25f, len174, vol_inter_q.data);
    mock::add(log_res_q.data, vol_inter_q.data, len176, d1_inter_q.data);
    mock::muli(volatility_q38.data, 0.5f, len178, vol_sqrt_T_q.data);
    mock::div(d1_inter_q.data, vol_sqrt_T_q.data, len180, d1_q.data);
    mock::cdf(d1_q.data, len183, d1_cdf_q.data);
    mock::mul(d1_cdf_q.data, stock_price_q37.data, len184, part1_q.data);
    mock::sub(d1_q.data, vol_sqrt_T_q.data, len186, d2_q.data);
    mock::cdf(d2_q.data, len189, d2_cdf_q.data);
    mock::muli(strike_price_q36.data, 0.997503f, len190, k_scaled_q.data);
    mock::mul(d2_cdf_q.data, k_scaled_q.data, len192, part2_q.data);
    mock::sub(part1_q.data, part2_q.data, len194, out_q.data);
}

  s_over_k_q.destroy();
  log_res_q.destroy();
  vol_sq_q.destroy();
  vol_sq_half_q.destroy();
  vol_sq_half_plusr_q.destroy();
  vol_inter_q.destroy();
  d1_inter_q.destroy();
  vol_sqrt_T_q.destroy();
  d1_q.destroy();
  d1_cdf_q.destroy();
  part1_q.destroy();
  d2_q.destroy();
  d2_cdf_q.destroy();
  k_scaled_q.destroy();
  part2_q.destroy();
}

