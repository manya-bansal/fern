void my_fused_impl(const Array<float> lat2, const Array<float> lon2, Array<float> a){
  int64_t x193 = 0;
 int64_t x191 = x193;
 int64_t len190 = len192;
 int64_t x189 = x191;
 int64_t len188 = len190;
 int64_t x187 = x189;
 int64_t len186 = len188;
 int64_t x185 = x187;
 int64_t len184 = len186;
 int64_t x183 = x185;
 int64_t len182 = len184;
 int64_t x175 = x185;
 int64_t len174 = len184;
 int64_t len192 = len182;
 int64_t x181 = x183;
 int64_t len180 = len182;
 int64_t x179 = x181;
 int64_t len178 = len180;
 int64_t x177 = x179;
 int64_t len176 = len178;
 int64_t x163 = x177;
 int64_t len162 = len176;
 int64_t x173 = x175;
 int64_t len172 = len174;
 int64_t x171 = x173;
 int64_t len170 = len172;
 int64_t x169 = x171;
 int64_t len168 = len170;
 int64_t x167 = x169;
 int64_t len166 = len168;
 int64_t x165 = x167;
 int64_t len164 = len166;
 int64_t x161 = x165;
 int64_t len160 = len164;
 Array<float> dlat_q = array_alloc<float>(x161, len160);
 Array<float> dlon_q = array_alloc<float>(x163, len162);
 Array<float> a2_q = array_alloc<float>(x183, len182);
 for(int64_t x193 = a.idx;x193 < a.idx + a.size; x193+=len192){
    int64_t x191 = x193;
  int64_t len190 = len192;
  int64_t x189 = x191;
  int64_t len188 = len190;
  int64_t x187 = x189;
  int64_t len186 = len188;
  int64_t x185 = x187;
  int64_t len184 = len186;
  int64_t x183 = x185;
  int64_t len182 = len184;
  int64_t x175 = x185;
  int64_t len174 = len184;
  int64_t len192 = len182;
  int64_t x181 = x183;
  int64_t len180 = len182;
  int64_t x179 = x181;
  int64_t len178 = len180;
  int64_t x177 = x179;
  int64_t len176 = len178;
  int64_t x163 = x177;
  int64_t len162 = len176;
  int64_t x173 = x175;
  int64_t len172 = len174;
  int64_t x171 = x173;
  int64_t len170 = len172;
  int64_t x169 = x171;
  int64_t len168 = len170;
  int64_t x167 = x169;
  int64_t len166 = len168;
  int64_t x165 = x167;
  int64_t len164 = len166;
  int64_t x161 = x165;
  int64_t len160 = len164;
  Array<float> lat2_q37 = lat2.array_query_no_materialize(x161, len160);
  Array<float> lon2_q36 = lon2.array_query_no_materialize(x163, len162);
  Array<float> a_q35 = a.array_query_no_materialize(x183, len182);
  Array<float> a_q = a.array_query_no_materialize(x193, len192);
    ispc::subi_ispc(lat2_q37.data, 0.709843, len160, dlat_q.data);
    ispc::subi_ispc(lon2_q36.data, -1.23892, len162, dlon_q.data);
    ispc::divi_ispc(dlat_q.data, 2, len164, dlat_q.data);
    ispc::sin_ispc(dlat_q.data, len166, dlat_q.data);
    ispc::sin_ispc(dlat_q.data, len168, dlat_q.data);
    ispc::mul_ispc(dlat_q.data, dlat_q.data, len170, dlat_q.data);
    ispc::cos_ispc(dlat_q.data, len172, dlat_q.data);
    ispc::muli_ispc(dlat_q.data, 0.758464, len174, dlat_q.data);
    ispc::divi_ispc(dlon_q.data, 2, len176, dlon_q.data);
    ispc::sin_ispc(dlon_q.data, len178, dlon_q.data);
    ispc::mul_ispc(dlon_q.data, dlon_q.data, len180, dlon_q.data);
    ispc::mul_ispc(a_q35.data, dlon_q.data, len182, a2_q.data);
    ispc::add_ispc(a2_q.data, dlat_q.data, len184, a2_q.data);
    ispc::sqrt_ispc(a2_q.data, len186, a2_q.data);
    ispc::asin_ispc(a2_q.data, len188, a2_q.data);
    ispc::muli_ispc(a2_q.data, 2, len190, a2_q.data);
    ispc::muli_ispc(a2_q.data, 3959, len192, a_q.data);
}

  dlat_q.destroy();
  dlon_q.destroy();
  a2_q.destroy();
}

