void my_fused_impl(const Array<float> lat2, const Array<float> lon2, Array<float> a){
  int64_t x177 = 0;
 int64_t x175 = x177;
 int64_t len174 = len176;
 int64_t x172 = x175;
 int64_t len173 = len174;
 int64_t x170 = x172;
 int64_t len171 = len173;
 int64_t x168 = x170;
 int64_t len169 = len171;
 int64_t x166 = x168;
 int64_t len167 = len169;
 int64_t x159 = x168;
 int64_t len158 = len169;
 int64_t len176 = len167;
 int64_t x164 = x166;
 int64_t len165 = len167;
 int64_t x162 = x164;
 int64_t len163 = len165;
 int64_t x160 = x162;
 int64_t len161 = len163;
 int64_t x147 = x160;
 int64_t len146 = len161;
 int64_t x156 = x159;
 int64_t len157 = len158;
 int64_t x154 = x156;
 int64_t len155 = len157;
 int64_t x152 = x154;
 int64_t len153 = len155;
 int64_t x151 = x152;
 int64_t len150 = len153;
 int64_t x148 = x151;
 int64_t len149 = len150;
 int64_t x145 = x148;
 int64_t len144 = len149;
 Array<float> dlat_q = array_alloc<float>(x145, len144);
 Array<float> dlon_q = array_alloc<float>(x147, len146);
 Array<float> a2_q = array_alloc<float>(x166, len167);
 for(int64_t x177 = a.idx;x177 < a.idx + a.size; x177+=len176){
    int64_t x175 = x177;
  int64_t len174 = len176;
  int64_t x172 = x175;
  int64_t len173 = len174;
  int64_t x170 = x172;
  int64_t len171 = len173;
  int64_t x168 = x170;
  int64_t len169 = len171;
  int64_t x166 = x168;
  int64_t len167 = len169;
  int64_t x159 = x168;
  int64_t len158 = len169;
  int64_t len176 = len167;
  int64_t x164 = x166;
  int64_t len165 = len167;
  int64_t x162 = x164;
  int64_t len163 = len165;
  int64_t x160 = x162;
  int64_t len161 = len163;
  int64_t x147 = x160;
  int64_t len146 = len161;
  int64_t x156 = x159;
  int64_t len157 = len158;
  int64_t x154 = x156;
  int64_t len155 = len157;
  int64_t x152 = x154;
  int64_t len153 = len155;
  int64_t x151 = x152;
  int64_t len150 = len153;
  int64_t x148 = x151;
  int64_t len149 = len150;
  int64_t x145 = x148;
  int64_t len144 = len149;
  Array<float> lat2_q32 = lat2.array_query_no_materialize(x145, len144);
  Array<float> lon2_q31 = lon2.array_query_no_materialize(x147, len146);
  Array<float> a_q30 = a.array_query_no_materialize(x166, len167);
  Array<float> a_q = a.array_query_no_materialize(x177, len176);
    ispc::subi_ispc(lat2_q32.data, 0.709843, len144, dlat_q.data);
    ispc::subi_ispc(lon2_q31.data, -1.23892, len146, dlon_q.data);
    ispc::divi_ispc(dlat_q.data, 2, len149, dlat_q.data);
    ispc::sin_ispc(dlat_q.data, len150, dlat_q.data);
    ispc::sin_ispc(dlat_q.data, len153, dlat_q.data);
    ispc::mul_ispc(dlat_q.data, dlat_q.data, len155, dlat_q.data);
    ispc::cos_ispc(dlat_q.data, len157, dlat_q.data);
    ispc::muli_ispc(dlat_q.data, 0.758464, len158, dlat_q.data);
    ispc::divi_ispc(dlon_q.data, 2, len161, dlon_q.data);
    ispc::sin_ispc(dlon_q.data, len163, dlon_q.data);
    ispc::mul_ispc(dlon_q.data, dlon_q.data, len165, dlon_q.data);
    ispc::mul_ispc(a_q30.data, dlon_q.data, len167, a2_q.data);
    ispc::add_ispc(a2_q.data, dlat_q.data, len169, a2_q.data);
    ispc::sqrt_ispc(a2_q.data, len171, a2_q.data);
    ispc::asin_ispc(a2_q.data, len173, a2_q.data);
    ispc::muli_ispc(a2_q.data, 2, len174, a2_q.data);
    ispc::muli_ispc(a2_q.data, 3959, len176, a_q.data);
}

  dlat_q.destroy();
  dlon_q.destroy();
  a2_q.destroy();
}

