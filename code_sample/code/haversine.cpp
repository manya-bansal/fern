void my_fused_impl(const Array<float> lat2, const Array<float> lon2,
                   Array<float> a, int64_t len134) {
  int64_t x135 = 0;
  int64_t x133 = x135;
  int64_t len132 = len134;
  int64_t x131 = x133;
  int64_t len130 = len132;
  int64_t x129 = x131;
  int64_t len128 = len130;
  int64_t x126 = x129;
  int64_t len127 = len128;
  int64_t x125 = x126;
  int64_t len124 = len127;
  int64_t x117 = x126;
  int64_t len116 = len127;
  int64_t len134 = len124;
  int64_t x123 = x125;
  int64_t len122 = len124;
  int64_t x120 = x123;
  int64_t len121 = len122;
  int64_t x118 = x120;
  int64_t len119 = len121;
  int64_t x104 = x118;
  int64_t len105 = len119;
  int64_t x115 = x117;
  int64_t len114 = len116;
  int64_t x113 = x115;
  int64_t len112 = len114;
  int64_t x111 = x113;
  int64_t len110 = len112;
  int64_t x109 = x111;
  int64_t len108 = len110;
  int64_t x106 = x109;
  int64_t len107 = len108;
  int64_t x102 = x106;
  int64_t len103 = len107;
  Array<float> dlat_q = array_alloc<float>(x102, len103);
  Array<float> dlon_q = array_alloc<float>(x104, len105);
  Array<float> a2_q = array_alloc<float>(x125, len124);
  for (int64_t x135 = a.idx; x135 < a.idx + a.size; x135 += len134) {
    int64_t x133 = x135;
    int64_t len132 = len134;
    int64_t x131 = x133;
    int64_t len130 = len132;
    int64_t x129 = x131;
    int64_t len128 = len130;
    int64_t x126 = x129;
    int64_t len127 = len128;
    int64_t x125 = x126;
    int64_t len124 = len127;
    int64_t x117 = x126;
    int64_t len116 = len127;
    int64_t len134 = len124;
    int64_t x123 = x125;
    int64_t len122 = len124;
    int64_t x120 = x123;
    int64_t len121 = len122;
    int64_t x118 = x120;
    int64_t len119 = len121;
    int64_t x104 = x118;
    int64_t len105 = len119;
    int64_t x115 = x117;
    int64_t len114 = len116;
    int64_t x113 = x115;
    int64_t len112 = len114;
    int64_t x111 = x113;
    int64_t len110 = len112;
    int64_t x109 = x111;
    int64_t len108 = len110;
    int64_t x106 = x109;
    int64_t len107 = len108;
    int64_t x102 = x106;
    int64_t len103 = len107;
    Array<float> lat2_q22 = lat2.array_query_no_materialize(x102, len103);
    Array<float> lon2_q21 = lon2.array_query_no_materialize(x104, len105);
    Array<float> a_q20 = a.array_query_no_materialize(x125, len124);
    Array<float> a_q = a.array_query_no_materialize(x135, len134);
    ispc::subi_ispc(lat2_q22.data, 0.709843, len103, dlat_q.data);
    ispc::subi_ispc(lon2_q21.data, -1.23892, len105, dlon_q.data);
    ispc::divi_ispc(dlat_q.data, 2, len107, dlat_q.data);
    ispc::sin_ispc(dlat_q.data, len108, dlat_q.data);
    ispc::sin_ispc(dlat_q.data, len110, dlat_q.data);
    ispc::mul_ispc(dlat_q.data, dlat_q.data, len112, dlat_q.data);
    ispc::cos_ispc(dlat_q.data, len114, dlat_q.data);
    ispc::muli_ispc(dlat_q.data, 0.758464, len116, dlat_q.data);
    ispc::divi_ispc(dlon_q.data, 2, len119, dlon_q.data);
    ispc::sin_ispc(dlon_q.data, len121, dlon_q.data);
    ispc::mul_ispc(dlon_q.data, dlon_q.data, len122, dlon_q.data);
    ispc::mul_ispc(a_q20.data, dlon_q.data, len124, a2_q.data);
    ispc::add_ispc(a2_q.data, dlat_q.data, len127, a2_q.data);
    ispc::sqrt_ispc(a2_q.data, len128, a2_q.data);
    ispc::asin_ispc(a2_q.data, len130, a2_q.data);
    ispc::muli_ispc(a2_q.data, 2, len132, a2_q.data);
    ispc::muli_ispc(a2_q.data, 3959, len134, a_q.data);
  }

  dlat_q.destroy();
  dlon_q.destroy();
  a2_q.destroy();
}
