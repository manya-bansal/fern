void my_fused_impl(const Array<float> lat2, const Array<float> lon2, Array<float> a){
  int64_t x135 = 0;
 int64_t x133 = x135;
 int64_t len132 = len134;
 int64_t x130 = x133;
 int64_t len131 = len132;
 int64_t x128 = x130;
 int64_t len129 = len131;
 int64_t x126 = x128;
 int64_t len127 = len129;
 int64_t x124 = x126;
 int64_t len125 = len127;
 int64_t x117 = x126;
 int64_t len116 = len127;
 int64_t len134 = len125;
 int64_t x122 = x124;
 int64_t len123 = len125;
 int64_t x120 = x122;
 int64_t len121 = len123;
 int64_t x118 = x120;
 int64_t len119 = len121;
 int64_t x105 = x118;
 int64_t len104 = len119;
 int64_t x114 = x117;
 int64_t len115 = len116;
 int64_t x112 = x114;
 int64_t len113 = len115;
 int64_t x110 = x112;
 int64_t len111 = len113;
 int64_t x108 = x110;
 int64_t len109 = len111;
 int64_t x107 = x108;
 int64_t len106 = len109;
 int64_t x103 = x107;
 int64_t len102 = len106;
 Array<float> dlat_q = array_alloc<float>(x103, len102);
 Array<float> dlon_q = array_alloc<float>(x105, len104);
 Array<float> a2_q = array_alloc<float>(x124, len125);
 for(int64_t x135 = a.idx;x135 < a.idx + a.size; x135+=len134){
    int64_t x133 = x135;
  int64_t len132 = len134;
  int64_t x130 = x133;
  int64_t len131 = len132;
  int64_t x128 = x130;
  int64_t len129 = len131;
  int64_t x126 = x128;
  int64_t len127 = len129;
  int64_t x124 = x126;
  int64_t len125 = len127;
  int64_t x117 = x126;
  int64_t len116 = len127;
  int64_t len134 = len125;
  int64_t x122 = x124;
  int64_t len123 = len125;
  int64_t x120 = x122;
  int64_t len121 = len123;
  int64_t x118 = x120;
  int64_t len119 = len121;
  int64_t x105 = x118;
  int64_t len104 = len119;
  int64_t x114 = x117;
  int64_t len115 = len116;
  int64_t x112 = x114;
  int64_t len113 = len115;
  int64_t x110 = x112;
  int64_t len111 = len113;
  int64_t x108 = x110;
  int64_t len109 = len111;
  int64_t x107 = x108;
  int64_t len106 = len109;
  int64_t x103 = x107;
  int64_t len102 = len106;
  Array<float> lat2_q22 = lat2.array_query_no_materialize(x103, len102);
  Array<float> lon2_q21 = lon2.array_query_no_materialize(x105, len104);
  Array<float> a_q20 = a.array_query_no_materialize(x124, len125);
  Array<float> a_q = a.array_query_no_materialize(x135, len134);
    ispc::subi_ispc(lat2_q22.data, 0.709843, len102, dlat_q.data);
    ispc::subi_ispc(lon2_q21.data, -1.23892, len104, dlon_q.data);
    ispc::divi_ispc(dlat_q.data, 2, len106, dlat_q.data);
    ispc::sin_ispc(dlat_q.data, len109, dlat_q.data);
    ispc::sin_ispc(dlat_q.data, len111, dlat_q.data);
    ispc::mul_ispc(dlat_q.data, dlat_q.data, len113, dlat_q.data);
    ispc::cos_ispc(dlat_q.data, len115, dlat_q.data);
    ispc::muli_ispc(dlat_q.data, 0.758464, len116, dlat_q.data);
    ispc::divi_ispc(dlon_q.data, 2, len119, dlon_q.data);
    ispc::sin_ispc(dlon_q.data, len121, dlon_q.data);
    ispc::mul_ispc(dlon_q.data, dlon_q.data, len123, dlon_q.data);
    ispc::mul_ispc(a_q20.data, dlon_q.data, len125, a2_q.data);
    ispc::add_ispc(a2_q.data, dlat_q.data, len127, a2_q.data);
    ispc::sqrt_ispc(a2_q.data, len129, a2_q.data);
    ispc::asin_ispc(a2_q.data, len131, a2_q.data);
    ispc::muli_ispc(a2_q.data, 2, len132, a2_q.data);
    ispc::muli_ispc(a2_q.data, 3959, len134, a_q.data);
}

  dlat_q.destroy();
  dlon_q.destroy();
  a2_q.destroy();
}

