void my_fused_impl(const Array<float> lat2, const Array<float> lon2, Array<float> a){
  int64_t x197 = 0;
 int64_t x195 = x197;
 int64_t len194 = len196;
 int64_t x193 = x195;
 int64_t len192 = len194;
 int64_t x191 = x193;
 int64_t len190 = len192;
 int64_t x189 = x191;
 int64_t len188 = len190;
 int64_t x187 = x189;
 int64_t len186 = len188;
 int64_t x179 = x189;
 int64_t len178 = len188;
 int64_t len196 = len186;
 int64_t x184 = x187;
 int64_t len185 = len186;
 int64_t x182 = x184;
 int64_t len183 = len185;
 int64_t x180 = x182;
 int64_t len181 = len183;
 int64_t x167 = x180;
 int64_t len166 = len181;
 int64_t x176 = x179;
 int64_t len177 = len178;
 int64_t x174 = x176;
 int64_t len175 = len177;
 int64_t x172 = x174;
 int64_t len173 = len175;
 int64_t x170 = x172;
 int64_t len171 = len173;
 int64_t x169 = x170;
 int64_t len168 = len171;
 int64_t x165 = x169;
 int64_t len164 = len168;
 Array<float> dlat_q = array_alloc<float>(x165, len164);
 Array<float> dlon_q = array_alloc<float>(x167, len166);
 Array<float> a2_q = array_alloc<float>(x187, len186);
 for(int64_t x197 = a.idx;x197 < a.idx + a.size; x197+=len196){
    int64_t x195 = x197;
  int64_t len194 = len196;
  int64_t x193 = x195;
  int64_t len192 = len194;
  int64_t x191 = x193;
  int64_t len190 = len192;
  int64_t x189 = x191;
  int64_t len188 = len190;
  int64_t x187 = x189;
  int64_t len186 = len188;
  int64_t x179 = x189;
  int64_t len178 = len188;
  int64_t len196 = len186;
  int64_t x184 = x187;
  int64_t len185 = len186;
  int64_t x182 = x184;
  int64_t len183 = len185;
  int64_t x180 = x182;
  int64_t len181 = len183;
  int64_t x167 = x180;
  int64_t len166 = len181;
  int64_t x176 = x179;
  int64_t len177 = len178;
  int64_t x174 = x176;
  int64_t len175 = len177;
  int64_t x172 = x174;
  int64_t len173 = len175;
  int64_t x170 = x172;
  int64_t len171 = len173;
  int64_t x169 = x170;
  int64_t len168 = len171;
  int64_t x165 = x169;
  int64_t len164 = len168;
  Array<float> lat2_q38 = lat2.array_query_no_materialize(x165, len164);
  Array<float> lon2_q37 = lon2.array_query_no_materialize(x167, len166);
  Array<float> a_q36 = a.array_query_no_materialize(x187, len186);
  Array<float> a_q = a.array_query_no_materialize(x197, len196);
    ispc::subi_ispc(lat2_q38.data, 0.709843, len164, dlat_q.data);
    ispc::subi_ispc(lon2_q37.data, -1.23892, len166, dlon_q.data);
    ispc::divi_ispc(dlat_q.data, 2, len168, dlat_q.data);
    ispc::sin_ispc(dlat_q.data, len171, dlat_q.data);
    ispc::sin_ispc(dlat_q.data, len173, dlat_q.data);
    ispc::mul_ispc(dlat_q.data, dlat_q.data, len175, dlat_q.data);
    ispc::cos_ispc(dlat_q.data, len177, dlat_q.data);
    ispc::muli_ispc(dlat_q.data, 0.758464, len178, dlat_q.data);
    ispc::divi_ispc(dlon_q.data, 2, len181, dlon_q.data);
    ispc::sin_ispc(dlon_q.data, len183, dlon_q.data);
    ispc::mul_ispc(dlon_q.data, dlon_q.data, len185, dlon_q.data);
    ispc::mul_ispc(a_q36.data, dlon_q.data, len186, a2_q.data);
    ispc::add_ispc(a2_q.data, dlat_q.data, len188, a2_q.data);
    ispc::sqrt_ispc(a2_q.data, len190, a2_q.data);
    ispc::asin_ispc(a2_q.data, len192, a2_q.data);
    ispc::muli_ispc(a2_q.data, 2, len194, a2_q.data);
    ispc::muli_ispc(a2_q.data, 3959, len196, a_q.data);
}

  dlat_q.destroy();
  dlon_q.destroy();
  a2_q.destroy();
}

