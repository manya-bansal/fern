void my_fused_impl(const Array<float> lat2, const Array<float> lon2, Array<float> a){
  int64_t x223 = 0;
 int64_t x221 = x223;
 int64_t len220 = len222;
 int64_t x219 = x221;
 int64_t len218 = len220;
 int64_t x217 = x219;
 int64_t len216 = len218;
 int64_t x215 = x217;
 int64_t len214 = len216;
 int64_t x213 = x215;
 int64_t len212 = len214;
 int64_t x205 = x215;
 int64_t len204 = len214;
 int64_t len222 = len212;
 int64_t x211 = x213;
 int64_t len210 = len212;
 int64_t x209 = x211;
 int64_t len208 = len210;
 int64_t x207 = x209;
 int64_t len206 = len208;
 int64_t x193 = x207;
 int64_t len192 = len206;
 int64_t x203 = x205;
 int64_t len202 = len204;
 int64_t x201 = x203;
 int64_t len200 = len202;
 int64_t x199 = x201;
 int64_t len198 = len200;
 int64_t x197 = x199;
 int64_t len196 = len198;
 int64_t x195 = x197;
 int64_t len194 = len196;
 int64_t x191 = x195;
 int64_t len190 = len194;
 Array<float> a3_q = array_alloc<float>(x215, len214);
 Array<float> a4_q = array_alloc<float>(x217, len216);
 Array<float> a5_q = array_alloc<float>(x219, len218);
 Array<float> a6_q = array_alloc<float>(x221, len220);
 for(int64_t x223 = a.idx;x223 < a.idx + a.size; x223+=len222){
    int64_t x221 = x223;
  int64_t len220 = len222;
  int64_t x219 = x221;
  int64_t len218 = len220;
  int64_t x217 = x219;
  int64_t len216 = len218;
  int64_t x215 = x217;
  int64_t len214 = len216;
  int64_t x213 = x215;
  int64_t len212 = len214;
  int64_t x205 = x215;
  int64_t len204 = len214;
  int64_t len222 = len212;
  int64_t x211 = x213;
  int64_t len210 = len212;
  int64_t x209 = x211;
  int64_t len208 = len210;
  int64_t x207 = x209;
  int64_t len206 = len208;
  int64_t x193 = x207;
  int64_t len192 = len206;
  int64_t x203 = x205;
  int64_t len202 = len204;
  int64_t x201 = x203;
  int64_t len200 = len202;
  int64_t x199 = x201;
  int64_t len198 = len200;
  int64_t x197 = x199;
  int64_t len196 = len198;
  int64_t x195 = x197;
  int64_t len194 = len196;
  int64_t x191 = x195;
  int64_t len190 = len194;
  Array<float> lat2_q42 = lat2.array_query_no_materialize(x191, len190);
  Array<float> lon2_q41 = lon2.array_query_no_materialize(x193, len192);
  Array<float> a_q40 = a.array_query_no_materialize(x213, len212);
  Array<float> a_q = a.array_query_no_materialize(x223, len222);
    ispc::subi_ispc(lat2_q42.data, 0.709843, len190, dlon_q.data);
    ispc::subi_ispc(lon2_q41.data, -1.23892, len192, dlat_q.data);
    ispc::divi_ispc(dlon_q.data, 2, len194, dlon_q.data);
    ispc::sin_ispc(dlon_q.data, len196, dlon_q.data);
    ispc::sin_ispc(dlon_q.data, len198, dlon_q.data);
    ispc::mul_ispc(dlon_q.data, dlon_q.data, len200, dlon_q.data);
    ispc::cos_ispc(dlon_q.data, len202, dlon_q.data);
    ispc::muli_ispc(dlon_q.data, 0.758464, len204, dlon_q.data);
    ispc::divi_ispc(dlat_q.data, 2, len206, dlat7_q.data);
    ispc::sin_ispc(dlat7_q.data, len208, dlat7_q.data);
    ispc::mul_ispc(dlat7_q.data, dlat7_q.data, len210, dlat7_q.data);
    ispc::mul_ispc(a_q40.data, dlat7_q.data, len212, dlat7_q.data);
    ispc::add_ispc(dlat7_q.data, dlon_q.data, len214, a3_q.data);
    ispc::sqrt_ispc(a3_q.data, len216, a4_q.data);
    ispc::asin_ispc(a4_q.data, len218, a5_q.data);
    ispc::muli_ispc(a5_q.data, 2, len220, a6_q.data);
    ispc::muli_ispc(a6_q.data, 3959, len222, a_q.data);
}

  a3_q.destroy();
  a4_q.destroy();
  a5_q.destroy();
  a6_q.destroy();
}

