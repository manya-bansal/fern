void my_fused_impl(const Array<float> lat2, const Array<float> lon2, Array<float> a){
  int64_t x243 = 0;
 int64_t x241 = x243;
 int64_t len240 = len242;
 int64_t x239 = x241;
 int64_t len238 = len240;
 int64_t x237 = x239;
 int64_t len236 = len238;
 int64_t x235 = x237;
 int64_t len234 = len236;
 int64_t x233 = x235;
 int64_t len232 = len234;
 int64_t x225 = x235;
 int64_t len224 = len234;
 int64_t len242 = len232;
 int64_t x231 = x233;
 int64_t len230 = len232;
 int64_t x229 = x231;
 int64_t len228 = len230;
 int64_t x227 = x229;
 int64_t len226 = len228;
 int64_t x213 = x227;
 int64_t len212 = len226;
 int64_t x223 = x225;
 int64_t len222 = len224;
 int64_t x221 = x223;
 int64_t len220 = len222;
 int64_t x219 = x221;
 int64_t len218 = len220;
 int64_t x217 = x219;
 int64_t len216 = len218;
 int64_t x215 = x217;
 int64_t len214 = len216;
 int64_t x211 = x215;
 int64_t len210 = len214;
 Array<float> a3_q = array_alloc<float>(x235, len234);
 Array<float> a4_q = array_alloc<float>(x237, len236);
 Array<float> a5_q = array_alloc<float>(x239, len238);
 Array<float> a6_q = array_alloc<float>(x241, len240);
 for(int64_t x243 = a.idx;x243 < a.idx + a.size; x243+=len242){
    int64_t x241 = x243;
  int64_t len240 = len242;
  int64_t x239 = x241;
  int64_t len238 = len240;
  int64_t x237 = x239;
  int64_t len236 = len238;
  int64_t x235 = x237;
  int64_t len234 = len236;
  int64_t x233 = x235;
  int64_t len232 = len234;
  int64_t x225 = x235;
  int64_t len224 = len234;
  int64_t len242 = len232;
  int64_t x231 = x233;
  int64_t len230 = len232;
  int64_t x229 = x231;
  int64_t len228 = len230;
  int64_t x227 = x229;
  int64_t len226 = len228;
  int64_t x213 = x227;
  int64_t len212 = len226;
  int64_t x223 = x225;
  int64_t len222 = len224;
  int64_t x221 = x223;
  int64_t len220 = len222;
  int64_t x219 = x221;
  int64_t len218 = len220;
  int64_t x217 = x219;
  int64_t len216 = len218;
  int64_t x215 = x217;
  int64_t len214 = len216;
  int64_t x211 = x215;
  int64_t len210 = len214;
  Array<float> lat2_q48 = lat2.array_query_no_materialize(x211, len210);
  Array<float> lon2_q47 = lon2.array_query_no_materialize(x213, len212);
  Array<float> a_q46 = a.array_query_no_materialize(x233, len232);
  Array<float> a_q = a.array_query_no_materialize(x243, len242);
    ispc::subi_ispc(lat2_q48.data, 0.709843f, len210, dlon_q.data);
    ispc::subi_ispc(lon2_q47.data, -1.238922f, len212, dlat_q.data);
    ispc::divi_ispc(dlon_q.data, 2.000000f, len214, dlon_q.data);
    ispc::sin_ispc(dlon_q.data, len216, dlon_q.data);
    ispc::sin_ispc(dlon_q.data, len218, dlon_q.data);
    ispc::mul_ispc(dlon_q.data, dlon_q.data, len220, dlon_q.data);
    ispc::cos_ispc(dlon_q.data, len222, dlon_q.data);
    ispc::muli_ispc(dlon_q.data, 0.758464f, len224, dlon_q.data);
    ispc::divi_ispc(dlat_q.data, 2.000000f, len226, dlat7_q.data);
    ispc::sin_ispc(dlat7_q.data, len228, dlat7_q.data);
    ispc::mul_ispc(dlat7_q.data, dlat7_q.data, len230, dlat7_q.data);
    ispc::mul_ispc(a_q46.data, dlat7_q.data, len232, dlat7_q.data);
    ispc::add_ispc(dlat7_q.data, dlon_q.data, len234, a3_q.data);
    ispc::sqrt_ispc(a3_q.data, len236, a4_q.data);
    ispc::asin_ispc(a4_q.data, len238, a5_q.data);
    ispc::muli_ispc(a5_q.data, 2.000000f, len240, a6_q.data);
    ispc::muli_ispc(a6_q.data, 3959.000000f, len242, a_q.data);
}

  a3_q.destroy();
  a4_q.destroy();
  a5_q.destroy();
  a6_q.destroy();
}

