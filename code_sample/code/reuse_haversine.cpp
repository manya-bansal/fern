void my_fused_impl(const Array<float> lat2, const Array<float> lon2, Array<float> a){
  int64_t x239 = 0;
 int64_t x237 = x239;
 int64_t len236 = len238;
 int64_t x234 = x237;
 int64_t len235 = len236;
 int64_t x232 = x234;
 int64_t len233 = len235;
 int64_t x230 = x232;
 int64_t len231 = len233;
 int64_t x228 = x230;
 int64_t len229 = len231;
 int64_t x221 = x230;
 int64_t len220 = len231;
 int64_t len238 = len229;
 int64_t x227 = x228;
 int64_t len226 = len229;
 int64_t x224 = x227;
 int64_t len225 = len226;
 int64_t x222 = x224;
 int64_t len223 = len225;
 int64_t x209 = x222;
 int64_t len208 = len223;
 int64_t x218 = x221;
 int64_t len219 = len220;
 int64_t x216 = x218;
 int64_t len217 = len219;
 int64_t x214 = x216;
 int64_t len215 = len217;
 int64_t x212 = x214;
 int64_t len213 = len215;
 int64_t x211 = x212;
 int64_t len210 = len213;
 int64_t x207 = x211;
 int64_t len206 = len210;
 Array<float> a3_q = array_alloc<float>(x230, len231);
 Array<float> a4_q = array_alloc<float>(x232, len233);
 Array<float> a5_q = array_alloc<float>(x234, len235);
 Array<float> a6_q = array_alloc<float>(x237, len236);
 for(int64_t x239 = a.idx;x239 < a.idx + a.size; x239+=len238){
    int64_t x237 = x239;
  int64_t len236 = len238;
  int64_t x234 = x237;
  int64_t len235 = len236;
  int64_t x232 = x234;
  int64_t len233 = len235;
  int64_t x230 = x232;
  int64_t len231 = len233;
  int64_t x228 = x230;
  int64_t len229 = len231;
  int64_t x221 = x230;
  int64_t len220 = len231;
  int64_t len238 = len229;
  int64_t x227 = x228;
  int64_t len226 = len229;
  int64_t x224 = x227;
  int64_t len225 = len226;
  int64_t x222 = x224;
  int64_t len223 = len225;
  int64_t x209 = x222;
  int64_t len208 = len223;
  int64_t x218 = x221;
  int64_t len219 = len220;
  int64_t x216 = x218;
  int64_t len217 = len219;
  int64_t x214 = x216;
  int64_t len215 = len217;
  int64_t x212 = x214;
  int64_t len213 = len215;
  int64_t x211 = x212;
  int64_t len210 = len213;
  int64_t x207 = x211;
  int64_t len206 = len210;
  Array<float> lat2_q47 = lat2.array_query_no_materialize(x207, len206);
  Array<float> lon2_q46 = lon2.array_query_no_materialize(x209, len208);
  Array<float> a_q45 = a.array_query_no_materialize(x228, len229);
  Array<float> a_q = a.array_query_no_materialize(x239, len238);
    ispc::subi_ispc(lat2_q47.data, 0.709843, len206, dlon_q.data);
    ispc::subi_ispc(lon2_q46.data, -1.23892, len208, dlat_q.data);
    ispc::divi_ispc(dlon_q.data, 2, len210, dlon_q.data);
    ispc::sin_ispc(dlon_q.data, len213, dlon_q.data);
    ispc::sin_ispc(dlon_q.data, len215, dlon_q.data);
    ispc::mul_ispc(dlon_q.data, dlon_q.data, len217, dlon_q.data);
    ispc::cos_ispc(dlon_q.data, len219, dlon_q.data);
    ispc::muli_ispc(dlon_q.data, 0.758464, len220, dlon_q.data);
    ispc::divi_ispc(dlat_q.data, 2, len223, dlat7_q.data);
    ispc::sin_ispc(dlat7_q.data, len225, dlat7_q.data);
    ispc::mul_ispc(dlat7_q.data, dlat7_q.data, len226, dlat7_q.data);
    ispc::mul_ispc(a_q45.data, dlat7_q.data, len229, dlat7_q.data);
    ispc::add_ispc(dlat7_q.data, dlon_q.data, len231, a3_q.data);
    ispc::sqrt_ispc(a3_q.data, len233, a4_q.data);
    ispc::asin_ispc(a4_q.data, len235, a5_q.data);
    ispc::muli_ispc(a5_q.data, 2, len236, a6_q.data);
    ispc::muli_ispc(a6_q.data, 3959, len238, a_q.data);
}

  a3_q.destroy();
  a4_q.destroy();
  a5_q.destroy();
  a6_q.destroy();
}

